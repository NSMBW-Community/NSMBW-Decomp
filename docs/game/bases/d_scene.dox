/*!
@class dScene_c
@details
## Overview
Scene bases act as overall managers for specific parts of the game. As such, only one scene can be active at
any given time. All bases are created as children of the @ref ::m_nowScene "currently active scene", which
allows a scene switch to act as a garbage collection mechanism by deleting every other active base.

Scene execution (and therefore every other base's) cannot begin until the scene has finished initializing.

The game's initial scene is dScBoot_c (which performs various initialization tasks), while dScRestartCrsin_c
is used for soft resets to return to the title screen.

## Switching Scenes
To switch from the current scene to another, use the ::setNextScene function, providing the new scene's
profile name and parameters. The creation of the next scene is handled automatically.

@note
- Scene switches during resets are typically disallowed. However, this restriction can be bypassed by setting
the @p forceChange parameter to @p true in the ::setNextScene call.
- A scene switch cannot occur until the existing scene has completed its initialization, regardless of the
aforementioned parameter.
- Consecutive calls to set the next scene will have no effect.

## Scene Initialization
An @ref mpPhase "initialization phase" can be provided to set up the scene step by step. Typical actions
include:
- Loading additional resources (such as @ref dRes_c "archives", @ref LytBase_c "layouts" or effects) not
linked to a specific base (e.g. the worldmap model in the @ref dScWMap_c "worldmap scene"). Checks must be
added to ensure these resources have finished loading before initialization ends.
- Loading additional sound objects (see [below](#audio-initialization)).
- Creating specific bases necessary for the scene's functionality (e.g. the game interface for the scene).
@note The LASTACTOR base is created automatically.
- Setting the scene's paint function, which must always be the final step in initialization.
- In earlier development stages, any base used by the scene was dynamically linked in the first
initialization step.

Failure to complete initialization (e.g. due to missing resources) will cause the game to softlock.

@hint{Existing scene initialization phases are a good reference point for implementing custom scenes.}

### Audio Initialization
The following sound objects are automatically created and deleted; other sound objects must be managed
manually:
- SndObjctCmnEmy_c
- SndObjctCmnMap_c
- NonPosSndObjctAmb_c

@todo Expand this section when dAudio and the related classes are decompiled.

## Scene Fading
The fader to be used for a scene transition can be set with dFader_c::setFader. The fade-in and fade-out
durations can be set using ::setFadeInFrame and ::setFadeOutFrame respectively. Both can be set simultaneously
with ::setFadeInOutFrame.

The previous scene is automatically deleted once the fade-out completes. The next scene will fade in automatically
unless ::m_isAutoFadeIn is set to @p false (in that case, the fade-in must be started manually by calling
dFader_c::startFadeIn and audio must be reinitialized with dAudio::requestStartScene).
*/
